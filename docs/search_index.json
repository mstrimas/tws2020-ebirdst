[
["index.html", "TWS 2020: eBird Status and Trends Welcome 0.1 Setup", " TWS 2020: eBird Status and Trends Matthew Strimas-Mackey and Orin Robinson 2020-08-10 Welcome The community science project eBird has generated a database of over 800 million bird observations, with broad spatial and taxonomic coverage. Over the past 10 years, the Cornell Lab of Ornithology has developed machine-learning models using eBird and remotely-sensed data to produce high resolution, weekly estimates of range boundaries, occurrence rate, and relative abundance while accounting for many of the biases inherent in community science datasets, including variation in observer behavior and effort. Visualizations and modeled data products for 610 North American breeding birds, including resident and non-breeding grounds in South America, are currently available on the eBird Status and Trends website. This workshop will introduce attendees to the modeled data products (weekly estimates of range boundaries, occurrence rate, and relative abundance) and the ebirdst R package developed specifically for working with these data. This will include an introduction to the modeling process used to generate the eBird Status and Trends data products. It will also include a demonstration of how to access and manipulate these data products for specific combinations of species, seasons, and regions using the ebirdst package. After the workshop, attendees will have an understanding of how and when to use these data products for applied research and conservation efforts, including within-year dynamics. Some experience with R will be helpful in following along with the demonstration. Please note, this workshop will not cover the analysis of trends or trend data. 0.1 Setup To run the code in the workshop you’ll need to install the following packages: install.packages(c(&quot;tidyverse&quot;, &quot;raster&quot;, &quot;sf&quot;, &quot;ebirdst&quot;, &quot;rnaturalearth&quot;, &quot;rgeos&quot;, &quot;remotes&quot;)) remotes::install_github(&quot;ropensci/rnaturalearthhires&quot;) To download the source files and following along with this workshop visit the GitHub repository. "],
["access.html", "Lesson 1 Data Access 1.1 Objective 1.2 Introduction 1.3 Species list 1.4 Download data 1.5 Load data 1.6 Mapping", " Lesson 1 Data Access 1.1 Objective To download eBird Status &amp; Trends data using the R package ebirdst, load those data into R and make a simple map. 1.2 Introduction eBird Status and Trends provides modeled estimates of the distribution and relative abundance of 610 North American breeding bird species over their full annual cycle at high spatial and temporal resolution. All the data behind the maps you’ve likely seen online are freely and openly available, hosted by the Registry of Open Data on AWS. In addition to being able to download the data from AWS, we maintain the ebirdst R package for easily accessing and working with these data. In this lesson, we’ll show you how to access these data and load them into your R session. Let’s start by loading the ebirdst R package and some additional packages for working with the data. library(ebirdst) library(raster) library(dplyr) 1.3 Species list The ebirdst_runs object is a data frame listing all the available species. glimpse(ebirdst_runs) #&gt; Rows: 610 #&gt; Columns: 14 #&gt; $ species_code &lt;chr&gt; &quot;bbwduc&quot;, &quot;fuwduc&quot;, &quot;empgoo&quot;, &quot;snogoo&quot;, &quot;rosgoo&quot;, &quot;gwfgoo&quot;… #&gt; $ run_name &lt;chr&gt; &quot;bbwduc-ERD2018-EBIRD_SCIENCE-20191105-dc3957b5&quot;, &quot;fuwduc-… #&gt; $ scientific_name &lt;chr&gt; &quot;Dendrocygna autumnalis&quot;, &quot;Dendrocygna bicolor&quot;, &quot;Anser ca… #&gt; $ common_name &lt;chr&gt; &quot;Black-bellied Whistling-Duck&quot;, &quot;Fulvous Whistling-Duck&quot;, … #&gt; $ breeding_start_dt &lt;date&gt; 2018-05-24, 2018-05-10, 2018-05-24, 2018-06-07, NA, 2018-… #&gt; $ breeding_end_dt &lt;date&gt; 2018-08-03, 2018-08-17, 2018-06-21, 2018-08-17, NA, 2018-… #&gt; $ nonbreeding_start_dt &lt;date&gt; 2018-01-18, 2018-11-30, NA, 2018-12-28, 2018-12-14, 2018-… #&gt; $ nonbreeding_end_dt &lt;date&gt; 2018-03-01, 2018-02-15, NA, 2018-01-11, 2018-01-11, 2018-… #&gt; $ postbreeding_migration_start_dt &lt;date&gt; 2018-08-10, 2018-08-24, NA, 2018-08-24, 2018-09-07, 2018-… #&gt; $ postbreeding_migration_end_dt &lt;date&gt; 2018-01-11, 2018-11-23, NA, 2018-12-21, 2018-12-07, 2018-… #&gt; $ prebreeding_migration_start_dt &lt;date&gt; 2018-03-08, 2018-02-22, NA, 2018-01-18, 2018-01-18, 2018-… #&gt; $ prebreeding_migration_end_dt &lt;date&gt; 2018-05-17, 2018-05-03, NA, 2018-05-31, 2018-05-17, 2018-… #&gt; $ year_round_start_dt &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, 2018-01-04, NA, NA, 2… #&gt; $ year_round_end_dt &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, 2018-12-28, NA, NA, 2… If you’re working in RStudio, you can use View() to interactively explore this data frame. You can also consult the Status and Trends landing page to see the full list of species. These seasonal dates are defined through a process of expert review of the weekly Status and Trends maps and define the start and end weeks of each of the following seasons: breeding, non-breeding, pre-breeding migration, and post-breeding migration. If dates are missing for a given season, it means the species did not pass the review process for that season. 1.4 Download data The function ebirdst_download() downloads data for a single species from AWS. All you need to do is provide the name (common name, scientific name, or species code) of the species you want to download. For this example, I’ll download the data for Loggerhead Shrike. sp_path &lt;- ebirdst_download(species = &quot;Loggerhead Shrike&quot;) sp_path #&gt; [1] &quot;/Users/mes335/Library/Application Support/ebirdst/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13&quot; The function will automatically identify a suitable location to store the downloaded data and return that path, which we captured in the variable sp_path. By default, ebirdst_download() downloads just the raster predictions from Status and Trends for relative occurrence, count, and abundance. We can see the files downloaded with: list.files(sp_path, recursive = TRUE) #&gt; [1] &quot;data/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_config.rds&quot; #&gt; [2] &quot;data/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_srd_raster_template.tif&quot; #&gt; [3] &quot;data/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_test-data.csv&quot; #&gt; [4] &quot;results/preds/test_pred_ave.txt&quot; #&gt; [5] &quot;results/stixels/pi.txt&quot; #&gt; [6] &quot;results/stixels/summary.txt&quot; #&gt; [7] &quot;results/tifs/band_dates.csv&quot; #&gt; [8] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_lower.tif&quot; #&gt; [9] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_median.tif&quot; #&gt; [10] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_breeding.tif&quot; #&gt; [11] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_nonbreeding.tif&quot; #&gt; [12] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_postbreeding_migration.tif&quot; #&gt; [13] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_prebreeding_migration.tif&quot; #&gt; [14] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_upper.tif&quot; #&gt; [15] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_yearround.tif&quot; #&gt; [16] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_count_median.tif&quot; #&gt; [17] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_occurrence_median.tif&quot; There are some additional files that can be downloaded by specifying tifs_only = FALSE, which may be useful for certain applications. For further details on these data consult the associated ebirdst vignette. sp_path &lt;- ebirdst_download(species = &quot;logshr&quot;, tifs_only = FALSE) 1.5 Load data Now that we’ve downloaded the data, let’s load these data into our R session. These are raster data (i.e. estimates are provided over a regular grid) and therefore we’ll need the raster package (loaded above) to work with them. There are a variety of layers available, but let’s load the relative abundance estimates. To learn about some of the other layers, consult the associated vignette from the ebirdst package. abd &lt;- load_raster(product = &quot;abundance&quot;, path = sp_path) abd #&gt; class : RasterStack #&gt; dimensions : 5630, 7074, 39826620, 52 (nrow, ncol, ncell, nlayers) #&gt; resolution : 2963, 2963 (x, y) #&gt; extent : -2e+07, 943785, -6673060, 1e+07 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +a=6371007.181 +b=6371007.181 +units=m +no_defs #&gt; names : X2018.01.04, X2018.01.11, X2018.01.18, X2018.01.25, X2018.02.01, X2018.02.08, X2018.02.15, X2018.02.22, X2018.03.01, X2018.03.08, X2018.03.15, X2018.03.22, X2018.03.29, X2018.04.05, X2018.04.12, ... #&gt; min values : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ... #&gt; max values : 3.08, 3.04, 3.29, 3.31, 3.32, 3.32, 3.31, 3.09, 2.89, 2.53, 2.71, 2.20, 2.23, 2.34, 2.11, ... This is a RasterStack object with 52 layers, each providing a relative abundance estimate for a single week of the year. To see the dates corresponding to the midpoint of these weeks, use: parse_raster_dates(abd) #&gt; [1] &quot;2018-01-04&quot; &quot;2018-01-11&quot; &quot;2018-01-18&quot; &quot;2018-01-25&quot; &quot;2018-02-01&quot; &quot;2018-02-08&quot; &quot;2018-02-15&quot; #&gt; [8] &quot;2018-02-22&quot; &quot;2018-03-01&quot; &quot;2018-03-08&quot; &quot;2018-03-15&quot; &quot;2018-03-22&quot; &quot;2018-03-29&quot; &quot;2018-04-05&quot; #&gt; [15] &quot;2018-04-12&quot; &quot;2018-04-19&quot; &quot;2018-04-26&quot; &quot;2018-05-03&quot; &quot;2018-05-10&quot; &quot;2018-05-17&quot; &quot;2018-05-24&quot; #&gt; [22] &quot;2018-05-31&quot; &quot;2018-06-07&quot; &quot;2018-06-14&quot; &quot;2018-06-21&quot; &quot;2018-06-28&quot; &quot;2018-07-06&quot; &quot;2018-07-13&quot; #&gt; [29] &quot;2018-07-20&quot; &quot;2018-07-27&quot; &quot;2018-08-03&quot; &quot;2018-08-10&quot; &quot;2018-08-17&quot; &quot;2018-08-24&quot; &quot;2018-08-31&quot; #&gt; [36] &quot;2018-09-07&quot; &quot;2018-09-14&quot; &quot;2018-09-21&quot; &quot;2018-09-28&quot; &quot;2018-10-05&quot; &quot;2018-10-12&quot; &quot;2018-10-19&quot; #&gt; [43] &quot;2018-10-26&quot; &quot;2018-11-02&quot; &quot;2018-11-09&quot; &quot;2018-11-16&quot; &quot;2018-11-23&quot; &quot;2018-11-30&quot; &quot;2018-12-07&quot; #&gt; [50] &quot;2018-12-14&quot; &quot;2018-12-21&quot; &quot;2018-12-28&quot; For a given week, these data consist of estimates of relative abundance over a regular 2.96 km grid. For example, we can extract just the 20th week (centered on May 17, 2018) with: abd[[20]] #&gt; class : RasterLayer #&gt; band : 20 (of 52 bands) #&gt; dimensions : 5630, 7074, 39826620 (nrow, ncol, ncell) #&gt; resolution : 2963, 2963 (x, y) #&gt; extent : -2e+07, 943785, -6673060, 1e+07 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +a=6371007.181 +b=6371007.181 +units=m +no_defs #&gt; source : /Users/mes335/Library/Application Support/ebirdst/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13/results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_median.tif #&gt; names : X2018.05.17 #&gt; values : 0, 2.15 (min, max) 1.6 Mapping Let’s map a quick map of the May 17 abundance data to see what it looks like. The function abundance_palette() gives us access to the color palettes used in the online versions of the maps. par(mar = c(0, 0, 0, 0)) plot(abd[[20]], axes = FALSE, box = FALSE, col = abundance_palette(100, season = &quot;weekly&quot;), maxpixels = ncell(abd)) Notice the extreme distortion in the continents, that most of this map is taken up by areas where the species doesn’t occur, and that there isn’t much resolution in the color palette in areas where it does occur. These raster layers are provided for the entire Western Hemisphere in a sinusoidal equal area projection. This format ensures consistency across the full set of Status and Trends species, but isn’t ideal for mapping the data for a single species. To address this, each Status and Trends data package comes with a set of parameters suitable for mapping the data for that species. Let’s reproduce the above map using the provided extent, projection, and legend bins. # load mapping parameters map_pars &lt;- load_fac_map_parameters(sp_path) # crop and reproject abundance raster abd_proj &lt;- abd[[20]] %&gt;% crop(map_pars$fa_extent_sinu) %&gt;% projectRaster(crs = map_pars$custom_projection, method = &quot;ngb&quot;) # map par(mar = c(0, 0, 0, 0)) pal &lt;- abundance_palette(length(map_pars$abundance_bins), season = &quot;weekly&quot;) plot(abd_proj, breaks = c(0, map_pars$abundance_bins), col = c(&quot;#e6e6e6&quot;, pal), axes = FALSE, box = FALSE, maxpixels = ncell(abd_proj)) "],
["site-selection.html", "Lesson 2 Site Selection 2.1 Objective 2.2 Introduction 2.3 Seasonal abundance data 2.4 Range-wide site selection 2.5 Local Selection", " Lesson 2 Site Selection 2.1 Objective To use eBird Status &amp; Trends data to identify important sites for Loggerhead Shrike during the breeding season at different spatial scales. This is an example of an analysis you might do to prioritize sites for a species, perhaps for conservation or management. 2.2 Introduction In the previous lesson, we saw how to download eBird Status and Trends data and load weekly estimates of relative abundance into R for further analysis. In this lesson, we’ll demonstrate one possible use case for these data: identifying sites of high importance for a species of conservation concern. Let’s start by loading the libraries we’ll need for this analysis. library(ebirdst) library(raster) library(sf) library(rnaturalearth) library(dplyr) library(ggplot2) 2.3 Seasonal abundance data For this site selection analysis we’ll be interested in identifying important sites for Loggerhead Shrike during the breeding season. Recall from the previous lesson, that Status and Trends data are provided as weekly estimates and we can access predefined seasonal boundary dates from the ebirdst_runs data frame. logshr_run &lt;- filter(ebirdst_runs, common_name == &quot;Loggerhead Shrike&quot;) start_dt &lt;- logshr_run$breeding_start_dt end_dt &lt;- logshr_run$breeding_end_dt c(start_dt, end_dt) #&gt; [1] &quot;2018-05-17&quot; &quot;2018-06-21&quot; We could subset the weekly relative abundance RasterStack to just the breeding season weeks, then average across the weeks. However, as a shortcut, the ebirdst package provides pre-calculated seasonal raster layers, which we can access with load_raster(). # find the location of the data we downloaded in the previous lesson sp_path &lt;- get_species_path(&quot;Loggerhead Shrike&quot;) # load the seasonal rasters abd &lt;- load_raster(&quot;abundance_seasonal&quot;, sp_path) abd #&gt; class : RasterStack #&gt; dimensions : 5630, 7074, 39826620, 4 (nrow, ncol, ncell, nlayers) #&gt; resolution : 2963, 2963 (x, y) #&gt; extent : -2e+07, 943785, -6673060, 1e+07 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +a=6371007.181 +b=6371007.181 +units=m +no_defs #&gt; names : breeding, nonbreeding, postbreeding_migration, prebreeding_migration #&gt; min values : 0, 0, 0, 0 #&gt; max values : 1.90, 3.06, 2.03, 2.14 # subset to just the breeding season abd_breeding &lt;- abd[[&quot;breeding&quot;]] abd_breeding #&gt; class : RasterLayer #&gt; dimensions : 5630, 7074, 39826620 (nrow, ncol, ncell) #&gt; resolution : 2963, 2963 (x, y) #&gt; extent : -2e+07, 943785, -6673060, 1e+07 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +a=6371007.181 +b=6371007.181 +units=m +no_defs #&gt; source : /Users/mes335/Library/Application Support/ebirdst/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13/results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_breeding.tif #&gt; names : breeding #&gt; values : 0, 1.9 (min, max) This layer represents the expected relative abundance of Loggerhead Shrike during the breeding season on an eBird Traveling Count by a skilled eBirder starting at the optimal time of day with the optimal search duration and distance that maximizes detection of this species in a region. Let’s crop and re-project based on the species specific map parameters. # load mapping parameters map_pars &lt;- load_fac_map_parameters(sp_path) # crop and reproject abundance raster abd_breeding_proj &lt;- abd_breeding %&gt;% crop(map_pars$fa_extent_sinu) %&gt;% projectRaster(crs = map_pars$custom_projection, method = &quot;ngb&quot;) 2.4 Range-wide site selection To perform a range-wide site selection, we’ll identify the locations with the top 5% of non-zero abundance values across the entire range and visualize those locations. # remove zeroes prior to calculating quantiles abd_breeding_proj[abd_breeding_proj == 0] &lt;- NA # calculate the 95th quantile q95 &lt;- quantile(abd_breeding_proj, na.rm = TRUE, probs = 0.95) # identify top 5% of cells abd_top5 &lt;- abd_breeding_proj &gt;= q95 Finally let’s map these selected sites. par(mar = c(0, 0, 0, 0)) plot(abd_top5, col = c(&#39;#d9d9d9&#39;, &#39;#fd8d3c&#39;), axes = FALSE, box = FALSE, maxpixels = ncell(abd_top5)) 2.5 Local Selection Let’s transition from broad-scale, region-wide site selection to a local site selection exercise. For example, let’s consider a land trust working in Louisiana trying to identify important sites for Loggerhead Shrike. To start, we’ll get a boundary polygon for Louisiana. # get spatial boundary for louisiana la &lt;- ne_states(iso_a2 = &quot;US&quot;, returnclass = &quot;sf&quot;) %&gt;% filter(name == &quot;Louisiana&quot;) %&gt;% # project st_transform(crs = map_pars$custom_projection) We can identify the quartiles of the abundance data within Louisiana, essentially dividing the cells within the state into four equally sized groups. # mask to louisiana abd_breeding_la &lt;- mask(abd_breeding_proj, la) %&gt;% raster::trim() # calculate abundance quartiles quarters &lt;- quantile(abd_breeding_la, probs = c(0.25, 0.5, 0.75, 1)) # map par(mar = c(0, 0, 0, 0)) plot(abd_breeding_la, breaks = c(0, quarters), col = abundance_palette(4, season = &quot;weekly&quot;), maxpixels = ncell(abd_breeding_la), box = FALSE, axes = FALSE) plot(st_geometry(la), add = TRUE) 2.5.1 Uncertainty analysis When using these abundance rasters at a local scale, it’s important to be cautious because of the broad spatial scale at which the modeling was conducted. As with any modeled estimates, these abundance estimates have uncertainty associated with them. One approach to dealing with this is to use the spatial estimates of uncertainty (the 10th and 90th quantiles of relative abundance) to assess if locations that we’re considering for selection have overlapping confidence intervals. Let’s start by loading these upper and lower confidence interval raster layers, subsetting to the breeding season within Louisiana, and calculating a breeding season average. # load the upper and lower confidence intervals abd_upper &lt;- load_raster(&quot;abundance_upper&quot;, path = sp_path) abd_lower &lt;- load_raster(&quot;abundance_lower&quot;, path = sp_path) # subset to breeding season in louisiana la_breeding_season &lt;- ebirdst_extent(la, c(start_dt, end_dt)) abd_upper_br &lt;- ebirdst_subset(abd_upper, la_breeding_season) abd_lower_br &lt;- ebirdst_subset(abd_lower, la_breeding_season) # average for the breeding season and project abd_upper_br_avg &lt;- calc(abd_upper_br, fun = mean, na.rm = TRUE) %&gt;% projectRaster(crs = map_pars$custom_projection, method = &quot;ngb&quot;) abd_lower_br_avg &lt;- calc(abd_lower_br, fun = mean, na.rm = TRUE) %&gt;% projectRaster(crs = map_pars$custom_projection, method = &quot;ngb&quot;) Next, let’s imagine we’re considering three potential sites in northern Louisiana, one in each of the top three quartiles of abundance. # generate points and convert to spatial pts &lt;- data.frame(name = c(&quot;High&quot;, &quot;Middle&quot;, &quot;Low&quot;), lng = c(-92.0777, -92.1081, -92.1336), lat = c(32.2624, 32.2624, 32.2882)) %&gt;% st_as_sf(coords = c(&quot;lng&quot;, &quot;lat&quot;), crs = 4326) %&gt;% st_transform(crs = st_crs(map_pars$custom_projection)) We can overlay these points on a zoomed-in version of the above quartile map. Note that they each falls within a different colored cell, i.e. they all belong to different quartiles. plot(abd_breeding_la, breaks = c(0, quarters), col = abundance_palette(4, season = &quot;weekly&quot;), alpha = 0.75, ext = st_buffer(pts, 10000), maxpixels = ncell(abd_breeding_la), box = FALSE, axes = FALSE) plot(pts, pch = 21, bg = &quot;red&quot;, col = &quot;black&quot;, cex = 1, add = TRUE) Let’s look at the abundance and confidence intervals for each of these points. # extract raster values pts$abd &lt;- extract(abd_breeding_la, pts) pts$lower &lt;- extract(abd_lower_br_avg, pts) pts$upper &lt;- extract(abd_upper_br_avg, pts) # plot the confidence intervals for the three points ggplot(pts, aes(y = abd, x = name)) + geom_point() + geom_errorbar(aes(ymin = lower, ymax = upper)) + labs(x = &quot;Location&quot;, y = &quot;Relative Abundance&quot;, title = &quot;Confidence intervals for locations&quot;) 2.5.2 Ground truth One additional way to check the results of a site selection exercise is to ground truth the results using satellite imagery for the region in question. "],
["multi-species-trajectories.html", "Lesson 3 Multi-species Trajectories 3.1 Objective 3.2 Introduction 3.3 Multi-species data 3.4 Proportion of population 3.5 Trajectories 3.6 Richness", " Lesson 3 Multi-species Trajectories 3.1 Objective To prepare data for comparing Status and Trends results across multiple species. As an example, we’ll compute proportion of population trajectories for a suite of species. 3.2 Introduction Comparing Status and Trends results between species requires extra caution because the models give relative rather than absolute abundance. For example, species differ in their detectability, and this may cause in differences in relative abundance. To address this, we’ll convert relative abundance to a proportion of population metric for each species by dividing the abundance layer by the total abundance summed across the entire range. For any given cell, this gives the proportion of relative abundance occurring in that cell. In addition, in this lesson we’ll look at the temporal dimension of these data, plotting trajectories through time for a given region. Let’s start by loading the necessary packages for this lesson. library(ebirdst) library(raster) library(sf) library(rnaturalearth) library(tidyverse) library(parallel) extract &lt;- raster::extract For this example, we’ll be looking at a suite of shorebird species in Kansas, so let’s also get a boundary polygon for that state. ks &lt;- ne_states(iso_a2 = &quot;US&quot;, returnclass = &quot;sf&quot;) %&gt;% filter(name == &quot;Kansas&quot;) 3.3 Multi-species data We begin by downloading data for a suite of 7 shorebird species that all spend at least a portion of the year within Kansas. species &lt;- c(&quot;American Avocet&quot;, &quot;Snowy Plover&quot;, &quot;Hudsonian Godwit&quot;, &quot;Willet&quot;, &quot;Marbled Godwit&quot;, &quot;Sanderling&quot;, &quot;Semipalmated Sandpiper&quot;) sp_dirs &lt;- map_chr(species, ebirdst_download) %&gt;% setNames(species) 3.4 Proportion of population Our goal is to produce trajectories comparing the proportion of each species’ population within Kansas for each week of 2018. For each species we need to: Calculate the sum of the abundance within Kansas for each week Calculate the sum of the abundance across the entire range of the species for each week Calculate the proportion of the population as the ratio of the within Kansas abundance to the total abundance The below function performs these steps for a given species. Iterating over the full set of species is fairly computationally intensive, taking about 20 minutes on a laptop. calculate_trajectory &lt;- function(x, common_name, region) { message(names(x)) # load and project weekly abundance abd &lt;- load_raster(&quot;abundance&quot;, path = x) r &lt;- st_transform(region, crs = st_crs(abd)) # total abundance within region abd_region &lt;- abd %&gt;% crop(r) %&gt;% extract(r, fun = sum) abd_region &lt;- abd_region[1, , drop = TRUE] # calculate total range-wide abundance abd_total &lt;- mclapply(seq.int(nlayers(abd)), function(i) cellStats(abd[[i]], sum), mc.preschedule = TRUE, mc.set.seed = TRUE, mc.cores = detectCores()) %&gt;% unlist() data.frame(common_name = common_name, date = parse_raster_dates(abd), prop_pop = abd_region / abd_total, row.names = NULL) } trajectories &lt;- map2_dfr(sp_dirs, names(sp_dirs), calculate_trajectory, region = ks) write_csv(trajectories, &quot;data/shorebird_pop-trajectories.csv&quot;) 3.5 Trajectories Now we can plot these trajectories for the set of shorebird species. ggplot(trajectories, aes(date, prop_pop, color = common_name)) + geom_line() + labs(x = &quot;Week&quot;, y = &quot;Proportion of Population in Kansas&quot;, color = NULL) + theme(legend.position = &quot;bottom&quot;) 3.6 Richness Finally, we can combine these 7 trajectories into a single trajectory giving an estimate of the richness of this group of shorebirds throughout the year. richness &lt;- trajectories %&gt;% group_by(date) %&gt;% summarise(n_species = n_distinct(common_name[prop_pop != 0])) # plot richness ggplot(richness, aes(date, n_species)) + geom_line() + labs(x = &quot;Week&quot;, y = &quot;Richness&quot;) "],
["non-raster-data.html", "Lesson 4 Non-raster Data 4.1 Objective 4.2 Introduction 4.3 Effective extent 4.4 Predictive performance metrics 4.5 Predictor importance", " Lesson 4 Non-raster Data 4.1 Objective To use the non-raster, centroid data as a diagnostic tool to assess predictive performance and identify the most important habitat predictors. 4.2 Introduction If we use ebirdst_download(tifs_only = FALSE), the Status and Trends data packages that get downloaded will contain some addition data beyond the raster data we’ve already been working with. These data are provided at the level of the individual stixels that make up the ensemble which produces the abundance estimates. We often refer to these as “centroid” data because the centroids of the stixels are used to identify which stixel the values come from. These data have a variety of uses, but we’ll focus on three here: Identifying the effective region from which information is going into the analysis Using predictive performance metrics as a diagnostic tool to assess model performance in a given region Identifying the most important habitat predictors in a given region We’ll start be loading packages and defining a focal region and time period: Louisiana during the breeding season. library(ebirdst) library(raster) library(sf) library(rnaturalearth) library(dplyr) library(ggplot2) # louisiana la &lt;- ne_states(iso_a2 = &quot;US&quot;, returnclass = &quot;sf&quot;) %&gt;% filter(name == &quot;Louisiana&quot;) # breeding season logshr_run &lt;- filter(ebirdst_runs, common_name == &quot;Loggerhead Shrike&quot;) start_dt &lt;- logshr_run$breeding_start_dt end_dt &lt;- logshr_run$breeding_end_dt # ebirdst_extent object la_breeding_season &lt;- ebirdst_extent(la, c(start_dt, end_dt)) # loggerhead shrike data path sp_path &lt;- get_species_path(&quot;logshr&quot;) 4.3 Effective extent For a given region and time period, calc_effective_extent() produces a map showing the centroids of all the stixels that comprise the model. calc_effective_extent(sp_path, la_breeding_season) 4.4 Predictive performance metrics We can use plot_all_ppms() to assess model performance within a given region and season, here Louisiana during the breeding season. plot_all_ppms(sp_path, la_breeding_season) 4.5 Predictor importance Finally, we can look at the most importance predictor variables identified by the model in a given region and season. # load predictor importance data pis &lt;- load_pis(sp_path) # plot the predictor importances for louisiana in the breeding season plot_pis(pis, ext = la_breeding_season, by_cover_class = TRUE, n_top_pred = 25) "]
]
